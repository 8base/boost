// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Dropdown /> should render dropdown 1`] = `
.emotion-4 {
  cursor: pointer;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  height: auto;
  width: auto;
  z-index: 2;
}

.emotion-0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
  height: 100%;
}

<Dropdown
  isOpen={false}
>
  <branch(DropdownPlate)
    isOpen={false}
  >
    <DropdownPlate
      isOpen={false}
    >
      <Styled(dropdown)
        insideRef={[Function]}
        tag="div"
      >
        <Tag
          className="emotion-8 emotion-1"
          insideRef={[Function]}
          tag="div"
          tagName="div"
        >
          <div
            className="emotion-8 emotion-1"
          >
            <Manager
              tag={false}
            >
              <Dropdown.Head>
                <DropdownHead
                  dropdown={
                    Object {
                      "closeDropdown": undefined,
                      "isOpen": false,
                      "outsideClickIgnoreClass": "ignore-react-onclickoutside-0",
                      "targetWidth": undefined,
                      "toggleDropdown": [Function],
                    }
                  }
                >
                  <Styled(dropdownHead)
                    className="ignore-react-onclickoutside-0"
                    onClick={[Function]}
                    tagName="div"
                  >
                    <Tag
                      className="ignore-react-onclickoutside-0 emotion-4 emotion-1"
                      onClick={[Function]}
                      tagName="div"
                    >
                      <div
                        className="ignore-react-onclickoutside-0 emotion-4 emotion-1"
                        onClick={[Function]}
                      >
                        <Reference>
                          <InnerReference
                            getReferenceRef={[Function]}
                          >
                            <Styled(dropdownHeadTarget)
                              insideRef={[Function]}
                              tagName="div"
                            >
                              <Tag
                                className="emotion-0 emotion-1"
                                insideRef={[Function]}
                                tagName="div"
                              >
                                <div
                                  className="emotion-0 emotion-1"
                                >
                                  Head
                                </div>
                              </Tag>
                            </Styled(dropdownHeadTarget)>
                          </InnerReference>
                        </Reference>
                      </div>
                    </Tag>
                  </Styled(dropdownHead)>
                </DropdownHead>
              </Dropdown.Head>
              <Dropdown.Body>
                <withProps(OnClickOutside(DropdownBodyBase))
                  dropdown={
                    Object {
                      "closeDropdown": undefined,
                      "isOpen": false,
                      "outsideClickIgnoreClass": "ignore-react-onclickoutside-0",
                      "targetWidth": undefined,
                      "toggleDropdown": [Function],
                    }
                  }
                >
                  <OnClickOutside(DropdownBodyBase)
                    dropdown={
                      Object {
                        "closeDropdown": undefined,
                        "isOpen": false,
                        "outsideClickIgnoreClass": "ignore-react-onclickoutside-0",
                        "targetWidth": undefined,
                        "toggleDropdown": [Function],
                      }
                    }
                    eventTypes={
                      Array [
                        "mousedown",
                        "touchstart",
                      ]
                    }
                    excludeScrollbar={false}
                    outsideClickIgnoreClass="ignore-react-onclickoutside-0"
                    preventDefault={false}
                    stopPropagation={false}
                  >
                    <DropdownBodyBase
                      background="none"
                      borderRadius="md"
                      closeOnClickOutside={true}
                      disableOnClickOutside={[Function]}
                      dropdown={
                        Object {
                          "closeDropdown": undefined,
                          "isOpen": false,
                          "outsideClickIgnoreClass": "ignore-react-onclickoutside-0",
                          "targetWidth": undefined,
                          "toggleDropdown": [Function],
                        }
                      }
                      enableOnClickOutside={[Function]}
                      eventTypes={
                        Array [
                          "mousedown",
                          "touchstart",
                        ]
                      }
                      forceRender={false}
                      isOpen={false}
                      offset="xs"
                      outsideClickIgnoreClass="ignore-react-onclickoutside-0"
                      padding="none"
                      pin="left"
                      placement="bottom"
                      preventDefault={false}
                      stopPropagation={false}
                      withPortal={false}
                    />
                  </OnClickOutside(DropdownBodyBase)>
                </withProps(OnClickOutside(DropdownBodyBase))>
              </Dropdown.Body>
            </Manager>
          </div>
        </Tag>
      </Styled(dropdown)>
    </DropdownPlate>
  </branch(DropdownPlate)>
</Dropdown>
`;
